---
title: "Analysis of a Specific Country Over Time"
---

Below, we analyze changes in life expectancy, GDP per capita, and population for a specific country. Select the your country and metric of interest. 

```{python}
#| echo: true

import pandas as pd
import plotly.express as px

df = pd.read_csv("gapminder.csv")
available_countries = df["country"].unique()  
metrics = {
    "Life Expectancy": "life_expectancy",
    "GDP per Capita": "gdp_per_capita",
    "Population": "population_millions",
}
default_country = "Brazil"
default_metric = "Population"

fig = px.line(
    df[df["country"] == default_country],
    x="year",
    y=metrics[default_metric],
    title=f"{default_metric} Trends in {default_country}",
    labels={"year": "Year", metrics[default_metric]: default_metric},
)

country_buttons = [
    {
        "args": [
            {"y": [df[df["country"] == c][metrics[default_metric]].values]},
            {"title": f"{default_metric} Trends in {c}"}
        ],
        "label": c,
        "method": "update",
    }
    for c in available_countries
]

metric_buttons = [
    {
        "args": [
            {"y": [df[df["country"] == default_country][metrics[m]].values]},
            {"title": f"{m} Trends in {default_country}"}
        ],
        "label": m,
        "method": "update",
    }
    for m in metrics.keys()
]

fig.update_layout(
    updatemenus=[
        {
            "buttons": country_buttons,
            "direction": "down",
            "x": 0.00,  
            "xanchor": "left",
            "y": 1.5,  
            "showactive": True,
            "font": {"size": 14},
            "active": list(available_countries).index(default_country), 
        },
        {
            "buttons": metric_buttons,
            "direction": "down",
            "x": 0.3,  
            "xanchor": "left",
            "y": 1.5,  
            "showactive": True,
            "font": {"size": 14},
            "active": list(metrics.keys()).index(default_metric),  
        },
    ]
)
fig.update_layout(
    xaxis_title="Year",
    yaxis_title=default_metric,
    font=dict(size=14),
    width=900,
    height=500,
)

fig.show()

```